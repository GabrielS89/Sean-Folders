package parcial;

import javax.swing.JOptionPane;
import java.util.Arrays;

public class CalculadoraCTS {
    public static void main(String[] args) {
        double[][] Sistema       = new double[3][3];  
        double[]   Independiente = new double[3];     
             
            for (int fila = 0; fila < 3; fila++) {          // filas
            for (int col = 0; col < 3; col++) {          // columnas
                String texto = JOptionPane.showInputDialog(
                null,
                "Ingresa Elemento [" + (fila+1) + "][" + (col+1) + "] =" ); // ingresar elemento correspondiente a cada fila y columna
                
                Sistema[fila][col] = Double.parseDouble(texto);  }  
            
    }

            for (int i = 0; i < 3; i++) {
                String texto = JOptionPane.showInputDialog(
                null,
                "Ingresa TÃ©rmino Independiente [" + (i+1) + "] =" ); // ingresar termino independiente en orden (x, y, z)
                
                Independiente[i] = Double.parseDouble(texto); 
                
    }  

            double Determinante = detSarrus(Sistema);  
                
    System.out.println(Arrays.deepToString(Sistema));
    System.out.println(Arrays.toString(Independiente));
          
    double[][] SistemaX = reemplazarColumna(Sistema, Independiente, 0); // columna x
    double[][] SistemaY = reemplazarColumna(Sistema, Independiente, 1); // columna y
    double[][] SistemaZ = reemplazarColumna(Sistema, Independiente, 2); // columna z

    double Dx = detSarrus(SistemaX);
    double Dy = detSarrus(SistemaY);
    double Dz = detSarrus(SistemaZ);
 
    double x = Dx / Determinante; // metodo cramer para hallar x, y, z
    double y = Dy / Determinante;
    double z = Dz / Determinante;
                        
        System.out.println(x);
        System.out.println(y);    
        System.out.println(z);
                
    }
    
   static double[][] reemplazarColumna(double[][] matriz, double[] independientes, int columna) {
    double[][] nueva = new double[3][3];

    for (int fila = 0; fila < 3; fila++) {
        for (int col = 0; col < 3; col++) { // va por cada celda de la matriz.
             
            if (col == columna) { //si esta en la columna seleccionada arriba cuando se llamo al metodo
                nueva[fila][col] = independientes[fila];  // reemplaza el valor por el independiente
            } else {
              
                nueva[fila][col] = matriz[fila][col]; // si no, copia el valor original.
            }
        }
    }

    return nueva;
}
   
    static double detSarrus(double[][] e) { // metodo sarrus para conseguir determinantes
    return e[0][0]*e[1][1]*e[2][2]
         + e[0][1]*e[1][2]*e[2][0]
         + e[0][2]*e[1][0]*e[2][1]
         - e[0][2]*e[1][1]*e[2][0]
         - e[0][0]*e[1][2]*e[2][1]
         - e[0][1]*e[1][0]*e[2][2];
}

}
